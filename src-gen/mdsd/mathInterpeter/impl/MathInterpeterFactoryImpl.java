/**
 * generated by Xtext 2.20.0
 */
package mdsd.mathInterpeter.impl;

import mdsd.mathInterpeter.Div;
import mdsd.mathInterpeter.Exp;
import mdsd.mathInterpeter.MathExp;
import mdsd.mathInterpeter.MathInterpeterFactory;
import mdsd.mathInterpeter.MathInterpeterPackage;
import mdsd.mathInterpeter.Minus;
import mdsd.mathInterpeter.Mult;
import mdsd.mathInterpeter.Parenthesis;
import mdsd.mathInterpeter.Plus;
import mdsd.mathInterpeter.Primary;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class MathInterpeterFactoryImpl extends EFactoryImpl implements MathInterpeterFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static MathInterpeterFactory init()
  {
    try
    {
      MathInterpeterFactory theMathInterpeterFactory = (MathInterpeterFactory)EPackage.Registry.INSTANCE.getEFactory(MathInterpeterPackage.eNS_URI);
      if (theMathInterpeterFactory != null)
      {
        return theMathInterpeterFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new MathInterpeterFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MathInterpeterFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case MathInterpeterPackage.MATH_EXP: return createMathExp();
      case MathInterpeterPackage.EXP: return createExp();
      case MathInterpeterPackage.PRIMARY: return createPrimary();
      case MathInterpeterPackage.PARENTHESIS: return createParenthesis();
      case MathInterpeterPackage.NUMBER: return createNumber();
      case MathInterpeterPackage.PLUS: return createPlus();
      case MathInterpeterPackage.MINUS: return createMinus();
      case MathInterpeterPackage.MULT: return createMult();
      case MathInterpeterPackage.DIV: return createDiv();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MathExp createMathExp()
  {
    MathExpImpl mathExp = new MathExpImpl();
    return mathExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Exp createExp()
  {
    ExpImpl exp = new ExpImpl();
    return exp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Primary createPrimary()
  {
    PrimaryImpl primary = new PrimaryImpl();
    return primary;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Parenthesis createParenthesis()
  {
    ParenthesisImpl parenthesis = new ParenthesisImpl();
    return parenthesis;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public mdsd.mathInterpeter.Number createNumber()
  {
    NumberImpl number = new NumberImpl();
    return number;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Plus createPlus()
  {
    PlusImpl plus = new PlusImpl();
    return plus;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Minus createMinus()
  {
    MinusImpl minus = new MinusImpl();
    return minus;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Mult createMult()
  {
    MultImpl mult = new MultImpl();
    return mult;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Div createDiv()
  {
    DivImpl div = new DivImpl();
    return div;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MathInterpeterPackage getMathInterpeterPackage()
  {
    return (MathInterpeterPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static MathInterpeterPackage getPackage()
  {
    return MathInterpeterPackage.eINSTANCE;
  }

} //MathInterpeterFactoryImpl
