/*
 * generated by Xtext 2.20.0
 */
package mdsd.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import mdsd.mathInterpeter.MathExp
import javax.swing.JOptionPane
import mdsd.mathInterpeter.Exp
import mdsd.mathInterpeter.Plus
//import mdsd.mathInterpeter.PlusMinus
import mdsd.mathInterpeter.Minus
import mdsd.mathInterpeter.Number
import mdsd.mathInterpeter.Parenthesis
import mdsd.mathInterpeter.Mult
import mdsd.mathInterpeter.Div

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class MathInterpeterGenerator extends AbstractGenerator {

override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		val math = resource.allContents.filter(MathExp).next
		val result = math.compute
		System.out.println("Math expression = "+math.display)
		// For +1 score, replace with hovering, see Bettini Chapter 8
		JOptionPane.showMessageDialog(null, "result = "+result,"Math Language", JOptionPane.INFORMATION_MESSAGE)
	}

	def compute(MathExp math) { 
		math.exp.interpet
	}
		
	def int interpet(Exp exp){
		
		switch exp{
			Plus:{
				val left = exp.left.interpet as Integer
				val right = exp.right.interpet as Integer
				left+right
			}
			Minus:{
				val left = exp.left.interpet as Integer
				val right = exp.right.interpet as Integer
				left-right
			}
			Mult:{
				val left = exp.left.interpet as Integer
				val right = exp.right.interpet as Integer
				left*right
			}
			Div:{
				val left = exp.left.interpet as Integer
				val right = exp.right.interpet as Integer
				left/right
			}
			Number: exp.value
			Parenthesis: {
				exp.exp.interpet
			}
			default: throw new IllegalArgumentException("This is not a valid input!")
		}
		
	}

	def CharSequence display(MathExp math) '''Math[«math.exp.displayExp»]'''
	def CharSequence displayExp(Exp exp) '''Exp[«exp.displayOp»]'''
	
	def dispatch String displayOp(Plus op)  '''«op.left.displayOp» + «op.right.displayOp»'''
	def dispatch String displayOp(Minus op)  '''(«op.left.displayOp» - «op.right.displayOp»)'''
	
	def dispatch String displayOp(Mult op)  '''(«op.left.displayOp» * «op.right.displayOp»)'''
	def dispatch String displayOp(Div op)  '''(«op.left.displayOp» / «op.right.displayOp»)'''
	
	
	def dispatch String displayOp(Number i)  '''«i.value»'''
	def dispatch String displayOp(Parenthesis par)  '''(«par.exp.displayOp»)'''
}
