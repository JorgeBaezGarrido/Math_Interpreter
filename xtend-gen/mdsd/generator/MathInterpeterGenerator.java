/**
 * generated by Xtext 2.20.0
 */
package mdsd.generator;

import com.google.common.collect.Iterators;
import java.util.Arrays;
import javax.swing.JOptionPane;
import mdsd.mathInterpeter.Div;
import mdsd.mathInterpeter.Exp;
import mdsd.mathInterpeter.MathExp;
import mdsd.mathInterpeter.Minus;
import mdsd.mathInterpeter.Mult;
import mdsd.mathInterpeter.Parenthesis;
import mdsd.mathInterpeter.Plus;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class MathInterpeterGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    final MathExp math = Iterators.<MathExp>filter(resource.getAllContents(), MathExp.class).next();
    final int result = this.compute(math);
    CharSequence _display = this.display(math);
    String _plus = ("Math expression = " + _display);
    System.out.println(_plus);
    JOptionPane.showMessageDialog(null, ("result = " + Integer.valueOf(result)), "Math Language", JOptionPane.INFORMATION_MESSAGE);
  }
  
  public int compute(final MathExp math) {
    return this.interpet(math.getExp());
  }
  
  public int interpet(final Exp exp) {
    int _switchResult = (int) 0;
    boolean _matched = false;
    if (exp instanceof Plus) {
      _matched=true;
      int _xblockexpression = (int) 0;
      {
        int _interpet = this.interpet(((Plus)exp).getLeft());
        final Integer left = ((Integer) Integer.valueOf(_interpet));
        int _interpet_1 = this.interpet(((Plus)exp).getRight());
        final Integer right = ((Integer) Integer.valueOf(_interpet_1));
        _xblockexpression = ((left).intValue() + (right).intValue());
      }
      _switchResult = _xblockexpression;
    }
    if (!_matched) {
      if (exp instanceof Minus) {
        _matched=true;
        int _xblockexpression = (int) 0;
        {
          int _interpet = this.interpet(((Minus)exp).getLeft());
          final Integer left = ((Integer) Integer.valueOf(_interpet));
          int _interpet_1 = this.interpet(((Minus)exp).getRight());
          final Integer right = ((Integer) Integer.valueOf(_interpet_1));
          _xblockexpression = ((left).intValue() - (right).intValue());
        }
        _switchResult = _xblockexpression;
      }
    }
    if (!_matched) {
      if (exp instanceof Mult) {
        _matched=true;
        int _xblockexpression = (int) 0;
        {
          int _interpet = this.interpet(((Mult)exp).getLeft());
          final Integer left = ((Integer) Integer.valueOf(_interpet));
          int _interpet_1 = this.interpet(((Mult)exp).getRight());
          final Integer right = ((Integer) Integer.valueOf(_interpet_1));
          _xblockexpression = ((left).intValue() * (right).intValue());
        }
        _switchResult = _xblockexpression;
      }
    }
    if (!_matched) {
      if (exp instanceof Div) {
        _matched=true;
        int _xblockexpression = (int) 0;
        {
          int _interpet = this.interpet(((Div)exp).getLeft());
          final Integer left = ((Integer) Integer.valueOf(_interpet));
          int _interpet_1 = this.interpet(((Div)exp).getRight());
          final Integer right = ((Integer) Integer.valueOf(_interpet_1));
          _xblockexpression = ((left).intValue() / (right).intValue());
        }
        _switchResult = _xblockexpression;
      }
    }
    if (!_matched) {
      if (exp instanceof mdsd.mathInterpeter.Number) {
        _matched=true;
        _switchResult = ((mdsd.mathInterpeter.Number)exp).getValue();
      }
    }
    if (!_matched) {
      if (exp instanceof Parenthesis) {
        _matched=true;
        _switchResult = this.interpet(((Parenthesis)exp).getExp());
      }
    }
    if (!_matched) {
      throw new IllegalArgumentException("This is not a valid input!");
    }
    return _switchResult;
  }
  
  public CharSequence display(final MathExp math) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("Math[");
    CharSequence _displayExp = this.displayExp(math.getExp());
    _builder.append(_displayExp);
    _builder.append("]");
    return _builder;
  }
  
  public CharSequence displayExp(final Exp exp) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("Exp[");
    String _displayOp = this.displayOp(exp);
    _builder.append(_displayOp);
    _builder.append("]");
    return _builder;
  }
  
  protected String _displayOp(final Plus op) {
    StringConcatenation _builder = new StringConcatenation();
    String _displayOp = this.displayOp(op.getLeft());
    _builder.append(_displayOp);
    _builder.append(" + ");
    String _displayOp_1 = this.displayOp(op.getRight());
    _builder.append(_displayOp_1);
    return _builder.toString();
  }
  
  protected String _displayOp(final Minus op) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("(");
    String _displayOp = this.displayOp(op.getLeft());
    _builder.append(_displayOp);
    _builder.append(" - ");
    String _displayOp_1 = this.displayOp(op.getRight());
    _builder.append(_displayOp_1);
    _builder.append(")");
    return _builder.toString();
  }
  
  protected String _displayOp(final Mult op) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("(");
    String _displayOp = this.displayOp(op.getLeft());
    _builder.append(_displayOp);
    _builder.append(" * ");
    String _displayOp_1 = this.displayOp(op.getRight());
    _builder.append(_displayOp_1);
    _builder.append(")");
    return _builder.toString();
  }
  
  protected String _displayOp(final Div op) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("(");
    String _displayOp = this.displayOp(op.getLeft());
    _builder.append(_displayOp);
    _builder.append(" / ");
    String _displayOp_1 = this.displayOp(op.getRight());
    _builder.append(_displayOp_1);
    _builder.append(")");
    return _builder.toString();
  }
  
  protected String _displayOp(final mdsd.mathInterpeter.Number i) {
    StringConcatenation _builder = new StringConcatenation();
    int _value = i.getValue();
    _builder.append(_value);
    return _builder.toString();
  }
  
  protected String _displayOp(final Parenthesis par) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("(");
    String _displayOp = this.displayOp(par.getExp());
    _builder.append(_displayOp);
    _builder.append(")");
    return _builder.toString();
  }
  
  public String displayOp(final Exp i) {
    if (i instanceof mdsd.mathInterpeter.Number) {
      return _displayOp((mdsd.mathInterpeter.Number)i);
    } else if (i instanceof Parenthesis) {
      return _displayOp((Parenthesis)i);
    } else if (i instanceof Div) {
      return _displayOp((Div)i);
    } else if (i instanceof Minus) {
      return _displayOp((Minus)i);
    } else if (i instanceof Mult) {
      return _displayOp((Mult)i);
    } else if (i instanceof Plus) {
      return _displayOp((Plus)i);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(i).toString());
    }
  }
}
